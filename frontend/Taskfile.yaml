version: "3"

vars:
  SERVICE: frontend
  IMAGE: craftista-frontend
  PORT: 3030

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  install:
    desc: Install dependencies
    cmds:
      - npm install
    sources:
      - package.json
    generates:
      - node_modules/**/*

  dev:
    desc: Run in development mode
    deps: [install]
    cmds:
      - npm start
    env:
      NODE_ENV: development

  test:
    desc: Run tests
    deps: [install]
    cmds:
      - npm test
    sources:
      - test/**/*.js
      - app.js
      - "*.js"

  lint:
    desc: Run linting
    deps: [install]
    cmds:
      - npx eslint . --ext .js || true

  build:
    desc: Build the application
    deps: [install]
    cmds:
      - echo "Frontend is interpreted, no build step required"

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.IMAGE}}:{{.TAG | default "latest"}} .
    sources:
      - Dockerfile
      - package*.json
      - "*.js"
      - public/**/*
      - views/**/*

  docker:run:
    desc: Run Docker container
    deps: [docker:build]
    cmds:
      - docker run -p {{.PORT}}:{{.PORT}} --rm {{.IMAGE}}:{{.TAG | default "latest"}}

  docker:push:
    desc: Push Docker image to registry
    vars:
      REGISTRY: '{{.REGISTRY | default "ghcr.io"}}'
      REPO: '{{.GITHUB_REPOSITORY | default "craftista/craftista"}}'
    cmds:
      - docker tag {{.IMAGE}}:{{.TAG | default "latest"}} {{.REGISTRY}}/{{.REPO}}/{{.IMAGE}}:{{.TAG | default "latest"}}
      - docker push {{.REGISTRY}}/{{.REPO}}/{{.IMAGE}}:{{.TAG | default "latest"}}

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf node_modules
      - rm -rf coverage
      - rm -rf .nyc_output
