name: Recommendation CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'recommendation/**'
      - '.github/workflows/recommendation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'recommendation/**'
      - '.github/workflows/recommendation.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/craftista-recommendation

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./recommendation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache-dependency-path: ./recommendation/go.sum
    
    - name: Download dependencies
      run: |
        go mod download
        go mod tidy
    
    - name: Run tests
      run: go test -v ./tests/...
    
    - name: Run formatting check
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted. Run 'go fmt ./...'"
          gofmt -d .
        fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./recommendation
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64